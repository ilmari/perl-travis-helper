if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  echo "This script must be sourced, not run directly." 1>&2
  exit 1
elif [ -z "$PERLBREW_ROOT" ]; then
  echo "Must be run under perlbrew."
  return 1
fi

export HELPER_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export SYSTEM_CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu || echo 1)
MODERN_PERL="$(
  for perl in "$PERLBREW_ROOT/perls/"*/bin/perl; do
    "$perl" -MConfig -le'
      print(($]*1000000)." ".($^X=~m{/}?$^X:$Config{perlpath}))
        unless ($]*1000) % 2;
    '
  done |
  sort -n |
  tail -1 |
  cut -c9-
)"
[ -z "$MODERN_PERL" ] && MODERN_PERL="$(which perl)"
export MODERN_PERL="env PERL5LIB= $MODERN_PERL"

[ -z "$AUTHOR_TESTING"  ] && export AUTHOR_TESTING=1
[ -z "$SPLIT_BUILD"     ] && export SPLIT_BUILD=1
[ -z "$COVERAGE"        ] && export COVERAGE=0

# work around potential quoting issues in .travis.yml
[[ "$TRAVIS_PERL_VERSION" =~ ^5\.[1-4]$ ]] && TRAVIS_PERL_VERSION+="0"

function build-dist {
  export BUILD_DIR="$(pwd)/build_dir"
  $HELPER_ROOT/bin/build-dist "$BUILD_DIR"
}

function local-lib {
  eval "$($HELPER_ROOT/bin/local-lib "$@")"
}

function build-perl {
  local TRAVIS_PERL_VERSION="$TRAVIS_PERL_VERSION"
  if [[ ( "$TRAVIS_PERL_VERSION" =~ ^5\.6[.-] || \
          "$TRAVIS_PERL_VERSION" =~ ^5\.6$ ) &&
        ! "$TRAVIS_PERL_VERSION" =~ @ ]]; then
    TRAVIS_PERL_VERSION="$TRAVIS_PERL_VERSION@base-5.6"
  fi
  $HELPER_ROOT/bin/build-perl "$TRAVIS_PERL_VERSION" || return 1
  if [ "${TRAVIS_PERL_VERSION/@*/}" == "system" ]; then
    perlbrew off
    if [ "${TRAVIS_PERL_VERSION/*@/}" != "$TRAVIS_PERL_VERSION" ]; then
      local-lib "${TRAVIS_PERL_VERSION/*@/}"
    fi
  else
    perlbrew use "$TRAVIS_PERL_VERSION" || return 1
  fi
  if [ "$SPLIT_BUILD" == "0" ]; then
    MODERN_PERL="env PERL5LIB= $(which perl)"
  fi
  if [ "$(perl -e'print int $]*1000')" -lt 5008 ]; then
    local pver="$(perl -e'printf "%.0f.%.0f.%.0f\n", int($]), ($] - int $])*1000, ($]*1000 - int($]*1000))*1_000')"
    CPAN_MIRROR="http://cp${pver}an.barnyard.co.uk/"
  fi
}

function cpan-install {
  $HELPER_ROOT/bin/cpan-install "$@"
}

function coverage-setup {
  [ "$COVERAGE" -eq 0 ] && return
  cover -delete -silent
  export HARNESS_PERL_SWITCHES='-MDevel::Cover=-ignore,^x?t/,-blib,0'
}

function coverage-report {
  [ "$COVERAGE" -eq 0 ] && return
  local cover_opts
  if perl -mDevel::Cover::Report::Coveralls -e1 2>/dev/null; then
    cover_opts="$cover_opts -report coveralls"
  fi
  cover "$@" $cover_opts
}

function test-dirs {
  local TEST_DIRS='t'
  if [ "$AUTHOR_TESTING" -ne 0 ] && [ -d xt ]; then
    TEST_DIRS="$TEST_DIRS xt"
  fi
  echo "$TEST_DIRS"
}

function test-files {
  find $(test-dirs) -name '*.t'
}

function prove {
  local perl="$("$(which perl)" -e'print $^X')"
  local proveperl="$(head -1 `which prove` | awk '{ if (substr($1,1,2)=="#!") print substr($1,3) }')"
  local -a args
  if [ "$proveperl" != "$perl" ]; then
    local IFS=":"
    local -a libs=($PERL5LIB)
    local PERL5LIB=
    for lib in "${libs[@]}"; do
      args=("${args[@]}" -I"$lib")
    done
    if [ -n "$HARNESS_PERL" ]; then
      local HARNESS_PERL="$perl"
      export HARNESS_PERL
    fi
  fi
  command prove "${args[@]}" "$@"
}

function perl-version {
  local index="$($MODERN_PERL -0777 -MCPAN::Meta::YAML -e'
    my $stage = shift;
    my $cmds = CPAN::Meta::YAML->read_string(scalar <>)->[0]->{$stage};
    for (0..$#$cmds) {
      print(($_+1)."\n")
        if $cmds->[$_] eq "perl-version";
  }' before_install < "$TRAVIS_BUILD_DIR/.travis.yml")"
  travis_time_finish
  travis_fold end "before_install.$index"
  perl -V
  travis_fold start "before_install.$index"
  travis_time_start
}

echo "Perl Travis Helpers: $(git --git-dir="$HELPER_ROOT/.git" describe --all --long HEAD)"

# vim: ft=sh
